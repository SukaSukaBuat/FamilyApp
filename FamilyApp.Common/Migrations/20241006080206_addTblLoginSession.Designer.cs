// <auto-generated />
using System;
using FamilyApp.Common.Databases.FamilyDb;
using FamilyApp.Common.Databases.FamilyDb.Objects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FamilyApp.Common.Migrations
{
    [DbContext(typeof(FamilyDbContext))]
    [Migration("20241006080206_addTblLoginSession")]
    partial class addTblLoginSession
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "gender", new[] { "male", "female" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "outh_provider", new[] { "none", "google" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FamilyApp.Common.Databases.FamilyDb.TblAuditTrail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Action")
                        .HasColumnType("integer")
                        .HasColumnName("action");

                    b.Property<DateTimeOffset>("ActionTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("action_timestamp");

                    b.Property<Guid>("ActorId")
                        .HasColumnType("uuid")
                        .HasColumnName("actor_id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid")
                        .HasColumnName("table_id");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("table_name");

                    b.HasKey("Id")
                        .HasName("pk_tbl_audit_trail");

                    b.ToTable("tbl_audit_trail", (string)null);
                });

            modelBuilder.Entity("FamilyApp.Common.Databases.FamilyDb.TblBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("TimestampCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp_created");

                    b.Property<DateTimeOffset>("TimestampUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp_updated");

                    b.HasKey("Id");

                    b.ToTable("tbl_base", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("FamilyApp.Common.Databases.FamilyDb.TblBaseSoftDelete", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("TimestampCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp_created");

                    b.Property<DateTimeOffset?>("TimestampDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp_deleted");

                    b.Property<DateTimeOffset>("TimestampUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp_updated");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("tbl_base_soft_delete", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("FamilyApp.Common.Databases.FamilyDb.TblUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<OuthProvider>("OuthProvider")
                        .HasColumnType("outh_provider")
                        .HasColumnName("outh_provider");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("Remarks")
                        .HasColumnType("text")
                        .HasColumnName("remarks");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<bool>("UserConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("user_confirmed");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_asp_net_users_email");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FamilyApp.Common.Databases.FamilyDb.TblLoginSession", b =>
                {
                    b.HasBaseType("FamilyApp.Common.Databases.FamilyDb.TblBase");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_tbl_login_session_user_id");

                    b.ToTable("tbl_login_session", (string)null);
                });

            modelBuilder.Entity("FamilyApp.Common.Databases.FamilyDb.TblMarried", b =>
                {
                    b.HasBaseType("FamilyApp.Common.Databases.FamilyDb.TblBase");

                    b.Property<Children[]>("Children")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("children")
                        .HasComment("Children id and relationship from table tbl_person");

                    b.Property<DateOnly?>("DateOfMarried")
                        .HasColumnType("date")
                        .HasColumnName("date_of_married");

                    b.Property<Guid>("HusbandId")
                        .HasColumnType("uuid")
                        .HasColumnName("husband_id");

                    b.Property<Guid>("WifeId")
                        .HasColumnType("uuid")
                        .HasColumnName("wife_id");

                    b.HasIndex("HusbandId")
                        .HasDatabaseName("ix_tbl_married_husband_id");

                    b.HasIndex("WifeId")
                        .HasDatabaseName("ix_tbl_married_wife_id");

                    b.ToTable("tbl_married", (string)null);
                });

            modelBuilder.Entity("FamilyApp.Common.Databases.FamilyDb.TblPerson", b =>
                {
                    b.HasBaseType("FamilyApp.Common.Databases.FamilyDb.TblBaseSoftDelete");

                    b.Property<Address>("Address")
                        .HasColumnType("jsonb")
                        .HasColumnName("address");

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTimeOffset?>("DateOfDeath")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_death");

                    b.Property<Gender>("Gender")
                        .HasColumnType("gender")
                        .HasColumnName("gender");

                    b.Property<string>("IcNumber")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("ic_number");

                    b.Property<bool>("IsAlive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_alive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Nickname")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("nickname");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("phone_number");

                    b.Property<Address>("PlaceOfBirth")
                        .HasColumnType("jsonb")
                        .HasColumnName("place_of_birth");

                    b.Property<Guid>("ReferenceAddress")
                        .HasColumnType("uuid")
                        .HasColumnName("reference_address")
                        .HasComment("Reference to the Id of user, where it will get the address from the user as it address, if the column address do not have data");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_tbl_person_user_id");

                    b.ToTable("tbl_person", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("FamilyApp.Common.Databases.FamilyDb.TblUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("FamilyApp.Common.Databases.FamilyDb.TblUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("FamilyApp.Common.Databases.FamilyDb.TblUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("FamilyApp.Common.Databases.FamilyDb.TblUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("FamilyApp.Common.Databases.FamilyDb.TblLoginSession", b =>
                {
                    b.HasOne("FamilyApp.Common.Databases.FamilyDb.TblUser", "TblUser")
                        .WithMany("TblLoginSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_tbl_login_session_asp_net_users_user_id");

                    b.Navigation("TblUser");
                });

            modelBuilder.Entity("FamilyApp.Common.Databases.FamilyDb.TblMarried", b =>
                {
                    b.HasOne("FamilyApp.Common.Databases.FamilyDb.TblPerson", "Husband")
                        .WithMany("AsHusband")
                        .HasForeignKey("HusbandId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_tbl_married_tbl_person_husband_id");

                    b.HasOne("FamilyApp.Common.Databases.FamilyDb.TblPerson", "Wife")
                        .WithMany("AsWife")
                        .HasForeignKey("WifeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_tbl_married_tbl_person_wife_id");

                    b.Navigation("Husband");

                    b.Navigation("Wife");
                });

            modelBuilder.Entity("FamilyApp.Common.Databases.FamilyDb.TblPerson", b =>
                {
                    b.HasOne("FamilyApp.Common.Databases.FamilyDb.TblUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_tbl_person_asp_net_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FamilyApp.Common.Databases.FamilyDb.TblUser", b =>
                {
                    b.Navigation("TblLoginSessions");
                });

            modelBuilder.Entity("FamilyApp.Common.Databases.FamilyDb.TblPerson", b =>
                {
                    b.Navigation("AsHusband");

                    b.Navigation("AsWife");
                });
#pragma warning restore 612, 618
        }
    }
}
